grammar puf.Puf;

// options (backtrack=true;)

Program: Include* Rdecl+;

Include: "#" "include" file=Str; 

option Decl: Rdecl | Tdecl;
Rdecl: Flhs "=" Expr ";";
Tdecl: Tlhs "=" Expr ";";

Flhs: Id+;
Tlhs: "(" f=Id ("," r=Id)* ")";

option Expr: 
	CaseExpr 
	| LetrecExpr 
	| LetExpr 
	| FunExpr 
	| IfExpr 
	| OrExpr;

CaseExpr: "case" expr=Expr "of" nilAlt=NilAlt ";" consAlt=ConsAlt;
NilAlt: "[" "]" "->" expr=Expr;
ConsAlt: head=Id ":" tail=Id "->" expr=Expr;
LetrecExpr: "letrec" Rdecl+ "in" Expr;
LetExpr: "let" Decl+ "in" Expr;
FunExpr: "fn" params=Id+ "->" Expr;
IfExpr: "if" cond=Expr "then" ifThen=Expr "else" ifElse=Expr;

OrExpr: left=AndExpr ("||" rest=AndExpr)*;
AndExpr: left=EqExpr ("&&" rest=EqExpr)*;

EqExpr: left=CompareExpr (op=EqOp right=CompareExpr)?;
terminal EqOp: "==" | "/=";

CompareExpr: left=ConsExpr (op=CompareOp right=ConsExpr)?;
terminal CompareOp: "<" | "<=" | ">" | ">=";

ConsExpr: left=PlusExpr (":" rest=ConsExpr)?;

PlusExpr: left=MulExpr (op=PlusExprOp rest=MulExpr)*;
option PlusExprOp: PlusOp | MinusOp;
terminal PlusOp: "+";
terminal MinusOp: "-";

MulExpr: left=UnaryExpr (op=MulExprOp rest=UnaryExpr)*;
option MulExprOp: MulOp | DivOp | ModOp;
terminal MulOp: "*";
terminal DivOp: "/";
terminal ModOp: "%";

option UnaryExpr: 
    NegExpr 
    | NotExpr 
    | SelectExpr 
    | ApplyExpr;
NegExpr: MinusOp expr=PrimaryExpr;
NotExpr: "not" expr=PrimaryExpr;
ApplyExpr: fun=PrimaryExpr (params=PrimaryExpr)*;
SelectExpr: "#" sel=Num tuple=PrimaryExpr;

option PrimaryExpr:
    Id 
    | Num 
    | TupleLiteral
    | ListLiteral
    ;
TupleLiteral:
    "(" ")"
    | "(" first=Expr ("," rest=Expr)* ")";
ListLiteral: 
    "[" "]" 
    | "[" first=Expr ("," rest=Expr)+ "]";

terminal Str: '"' ~('"')* '"';
terminal Id: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal Num: ('0'..'9')+;
fragment MlComment: '/*' (~'*' | '*' ~'/')* '*/';
fragment SlComment: '//' ~('\n'|'\r')*;
hidden terminal Ws: (' '|'\t'|'\r'|'\n'|MlComment|SlComment)+;